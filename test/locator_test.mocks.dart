// Mocks generated by Mockito 5.4.0 from annotations
// in moviedb/test/locator_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:either_dart/either.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:moviedb/features/movie/api/api_client.dart' as _i9;
import 'package:moviedb/features/movie/api/failures/failures.dart' as _i7;
import 'package:moviedb/features/movie/data_sources/movie_data_source.dart'
    as _i3;
import 'package:moviedb/features/movie/entities/movie.dart' as _i5;
import 'package:moviedb/features/movie/repositories/movie_repository.dart'
    as _i6;
import 'package:moviedb/features/movie/use_cases/get_movies.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MovieDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieDataSource extends _i1.Mock implements _i3.MovieDataSource {
  MockMovieDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i5.Movie>> getMovies() => (super.noSuchMethod(
        Invocation.method(
          #getMovies,
          [],
        ),
        returnValue: _i4.Future<List<_i5.Movie>>.value(<_i5.Movie>[]),
      ) as _i4.Future<List<_i5.Movie>>);
}

/// A class which mocks [MovieRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieRepository extends _i1.Mock implements _i6.MovieRepository {
  MockMovieRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i7.Failure, List<_i5.Movie>>> getMovies() =>
      (super.noSuchMethod(
        Invocation.method(
          #getMovies,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i7.Failure, List<_i5.Movie>>>.value(
            _FakeEither_0<_i7.Failure, List<_i5.Movie>>(
          this,
          Invocation.method(
            #getMovies,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i7.Failure, List<_i5.Movie>>>);
}

/// A class which mocks [GetMovies].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetMovies extends _i1.Mock implements _i8.GetMovies {
  MockGetMovies() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i7.Failure, List<_i5.Movie>>> call(
          _i8.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i4.Future<_i2.Either<_i7.Failure, List<_i5.Movie>>>.value(
            _FakeEither_0<_i7.Failure, List<_i5.Movie>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i7.Failure, List<_i5.Movie>>>);
}

/// A class which mocks [MovieApiClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieApiClient extends _i1.Mock implements _i9.MovieApiClient {
  MockMovieApiClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i5.Movie>> getMovies() => (super.noSuchMethod(
        Invocation.method(
          #getMovies,
          [],
        ),
        returnValue: _i4.Future<List<_i5.Movie>>.value(<_i5.Movie>[]),
      ) as _i4.Future<List<_i5.Movie>>);
}
